# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this code except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os
from typing import List

import click
import requests
from loguru import logger

# Import Gemini API client library (assuming it's available)
from google_generativeai import GeminiClient


def check_required_env_vars():
    """Check required environment variables"""
    required_env_vars = [
        "GEMINI_API_KEY",
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_PULL_REQUEST_NUMBER",
        "GIT_COMMIT_HASH",
    ]
    for required_env_var in required_env_vars:
        if os.getenv(required_env_var) is None:
            raise ValueError(f"{required_env_var} is not set")


def get_review_prompt(extra_prompt: str = "") -> str:
    """Get a prompt template"""
    template = f"""
    This is a pull request or a part of a pull request if the pull request is too large.
    Please assume you review this PR as a great software engineer and a great security engineer.
    Can you tell me the issues with differences in a pull request and provide suggestions to improve it?
    You can provide a summary of the review and comments about issues by file, if any important issues are found.

    {extra_prompt}
    """
    return template


def get_summarize_prompt() -> str:
    """Get a prompt template"""
    template = """
    This is a pull request of a set of reviews of a pull request.
    Those are generated by Google Generative AI's model.
    Can you summarized them?
    It would be good to focus on highlighting issues and providing suggestions to improve the pull request.
    """
    return template


def create_a_comment_to_pull_request(
    github_token: str, github_repository: str, pull_request_number: int, git_commit_hash: str, body: str
):
    """Create a comment to a pull request"""
    headers = {
        "Accept": "application/vnd.github.v3.patch",
        "authorization": f"Bearer {github_token}",
    }
    data = {"body": body, "commit_id": git_commit_hash, "event": "COMMENT"}
    url = f"https://api.github.com/repos/{github_repository}/pulls/{pull_request_number}/reviews"
    response = requests.post(url, headers=headers, data=json.dumps(data))
    return response


def chunk_string(input_string: str, chunk_size) -> List[str]:
    """Chunk a string"""
    chunked_inputs = []
    for i in range(0, len(input_string), chunk_size):
        chunked_inputs.append(input_string[i : i + chunk_size])
    return chunked_inputs


def get_review(
    client: GeminiClient,
    diff: str,
    extra_prompt: str,
    temperature: float,
    max_tokens: int,
):
    """Get a review using the Gemini API

    This function chunks the diff, sends each chunk along with the prompt to
    the Gemini API for review, and summarizes the individual reviews.

    Args:
        client (GeminiClient): An initialized GeminiClient object.
        diff (str): The pull request diff content.
        extra_prompt (str): Additional prompt text for Gemini.
        temperature (float): Temperature for controlling randomness.
        max_tokens (int): Maximum number of tokens for response generation.

    Returns:
        tuple: A tuple containing (chunked_reviews, summarized_review).
            - chunked_reviews (List[str]): List of individual review responses.
            - summarized_review (str): Summarized review of the entire diff.
    """

    # Chunk the diff
    prompt_chunk_size = 3500  # Adjust as needed for Gemini's capabilities
    chunked_diff_list = chunk_string(diff, chunk_size=prompt_chunk_size)

    # Get review by chunk
    chunked_reviews = []
    for chunked_diff in chunked_diff_list:
        review_prompt = get_review_prompt(extra_prompt=extra_prompt)
        response = client.text_generate(
            prompt=review_prompt + chunked_diff,
            temperature=temperature,
            max_tokens=max_tokens,
        )
        review_result = response.text
        chunked_reviews.append(review_result)

    # Summarize the chunked reviews
    summarize_prompt = get_summarize_prompt()
    response = client.text_generate(
        prompt=summarize_prompt + "\n".join(chunked_reviews),
        temperature=temperature,
        max_tokens=max_tokens,
    )
    summarized_review = response.text

    return chunked_reviews, summarized_review


@click.command()
@click.option("--diff", type=click.STRING, required=True, help="Pull request diff")
@click.option("--extra-prompt", type=click.STRING, required=False, default="", help="Extra prompt")
@click.option("--temperature", type=click.FLOAT, required=False, default=0.7, help="Temperature")
@click.option("--max-tokens", type=click.INT, required=False, default=1024, help="Max tokens")
@click.option("--log-level", type=click.STRING, required=False, default="INFO", help="Log level")
def main(
    diff: str,
    extra_prompt: str,
    temperature: float,
    max_tokens: int,
    log_level: str,
):
    # Set log level
    logger.level(log_level)

    # Check if necessary environment variables are set or not
    check_required_env_vars()

    # Authenticate with Gemini API (assuming API key is stored in environment variable)
    api_key = os.getenv("GEMINI_API_KEY")
    client = GeminiClient(api_key=api_key)

    # Request a code review
    chunked_reviews, summarized_review = get_review(
        client=client,
        diff=diff,
        extra_prompt=extra_prompt,
        temperature=temperature,
        max_tokens=max_tokens,
    )
    logger.debug(f"Summarized review: {summarized_review}")
    logger.debug(f"Chunked reviews: {chunked_reviews}")

    # Format reviews (same logic as before)
    review_comment = format_review_comment(summarized_review=summarized_review, chunked_reviews=chunked_reviews)

    # Create a comment to a pull request (same logic as before)
    create_a_comment_to_pull_request(
        github_token=os.getenv("GITHUB_TOKEN"),
        github_repository=os.getenv("GITHUB_REPOSITORY"),
        pull_request_number=int(os.getenv("GITHUB_PULL_REQUEST_NUMBER")),
        git_commit_hash=os.getenv("GIT_COMMIT_HASH"),
        body=review_comment,
    )


if __name__ == "__main__":
    # pylint: disable=no-value-for
