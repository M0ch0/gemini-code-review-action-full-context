#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
import json
import os
from typing import List

import click
import openai
import requests
from langchain import PromptTemplate
from loguru import logger


def check_required_env_vars():
    """Check required environment variables"""
    required_env_vars = [
        "OPENAI_API_KEY",
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_PULL_REQUEST_NUMBER",
        "GIT_COMMIT_HASH",
    ]
    for required_env_var in required_env_vars:
        if os.getenv(required_env_var) is None:
            raise ValueError(f"{required_env_var} is not set")


def get_review_prompt(diff: str, extra_prompt: str = "") -> str:
    """Get a prompt template"""
    template = """
    This is a pull request. Sometimes, it is a part of a pull request, if the pull request is too large.
    Please assume you are a reviewer of this PR as a great software engineer and a security engineer.
    Can you tell me the issues with the subsequent pull request and provide suggestions to improve it?
    It would be great if you can provide a summary of the review and comments about issues by file.

    {extra_prompt}

    The PR diff starts from the line below.
    {diff}
    """
    prompt = PromptTemplate(
        input_variables=["diff", "extra_prompt"],
        template=template,
    )
    return prompt.format(diff=diff, extra_prompt=extra_prompt)


def get_summarize_prompt(chunked_reviews: str) -> str:
    """Get a prompt template"""
    template = """
    This is a set of reviews of a pull request.
    Those are generated by OpenAI's GPT.
    Can you summarized the set of reviews?
    If necessary, you can add a comment about issues by file.

    ---
    {chunked_reviews}
    """
    prompt = PromptTemplate(
        input_variables=["chunked_reviews"],
        template=template,
    )
    return prompt.format(chunked_reviews=chunked_reviews)


def create_a_comment_to_pull_request(
        github_token: str,
        github_repository: str,
        pull_request_number: int,
        git_commit_hash: str,
        body: str):
    """Create a comment to a pull request"""
    headers = {
        "Accept": "application/vnd.github.v3.patch",
        "authorization": f"Bearer {github_token}"
    }
    data = {
        "body": body,
        "commit_id": git_commit_hash,
        "event": "COMMENT"
    }
    url = f"https://api.github.com/repos/{github_repository}/pulls/{pull_request_number}/reviews"
    response = requests.post(url, headers=headers, data=json.dumps(data))
    return response


def chunk_string(input_string: str, chunk_size) -> List[str]:
    """Chunk a string"""
    chunked_inputs = []
    for i in range(0, len(input_string), chunk_size):
        chunked_inputs.append(input_string[i:i + chunk_size])
    return chunked_inputs


def get_review(
        model: str,
        diff: str,
        extra_prompt: str,
        temperature: float,
        max_tokens: int,
        top_p: float,
        frequency_penalty: float,
        presence_penalty: float,
        prompt_chunk_size: int
):
    """Get a review"""
    # Chunk the prompt
    chunked_diff_list = chunk_string(input_string=diff, chunk_size=prompt_chunk_size)
    # Get summary by chunk
    chunked_reviews = []
    for chunked_diff in chunked_diff_list:
        review_prompt = get_review_prompt(diff=chunked_diff, extra_prompt=extra_prompt)
        response = openai.Completion.create(
            engine=model,
            prompt=review_prompt,
            temperature=temperature,
            max_tokens=max_tokens,
            top_p=top_p,
            frequency_penalty=frequency_penalty,
            presence_penalty=presence_penalty
        )
        review_result = response["choices"][0]["text"]
        chunked_reviews.append(review_result)
    # Summarize the chunked reviews
    summarize_prompt = get_summarize_prompt(chunked_reviews="\n".join(chunked_reviews))
    response = openai.Completion.create(
        engine=model,
        prompt=summarize_prompt,
        temperature=temperature,
        max_tokens=max_tokens,
        top_p=top_p,
        frequency_penalty=frequency_penalty,
        presence_penalty=presence_penalty
    )
    summarized_review = response["choices"][0]["text"]
    return chunked_reviews, summarized_review


@click.command()
@click.option("--diff", type=click.STRING, required=True, help="Pull request diff")
@click.option("--diff-chunk-size", type=click.INT, required=False, default=3500, help="Pull request diff")
@click.option("--model", type=click.STRING, required=False, default="text-davinci-003", help="OpenAI API key")
@click.option("--extra-prompt", type=click.STRING, required=False, default="", help="Extra prompt")
@click.option("--temperature", type=click.FLOAT, required=False, default=0.7, help="Temperature")
@click.option("--max-tokens", type=click.INT, required=False, default=256, help="Max tokens")
@click.option("--top-p", type=click.FLOAT, required=False, default=1.0, help="Top N")
@click.option("--frequency-penalty", type=click.FLOAT, required=False, default=0.0, help="Frequency penalty")
@click.option("--presence-penalty", type=click.FLOAT, required=False, default=0.0, help="Presence penalty")
@click.option("--log-level", type=click.STRING, required=False, default="INFO", help="Presence penalty")
def main(
        diff: str,
        diff_chunk_size: int,
        model: str,
        extra_prompt: str,
        temperature: float,
        max_tokens: int,
        top_p: float,
        frequency_penalty: float,
        presence_penalty: float,
        log_level: str
):
    # Set log level
    logger.level(log_level)
    # Check if necessary environment variables are set or not
    check_required_env_vars()

    # Set the OpenAI API key
    openai.api_key = os.getenv("OPENAI_API_KEY")

    # Request a code review
    chunked_reviews, summarized_review = get_review(
        diff=diff,
        extra_prompt=extra_prompt,
        model=model,
        temperature=temperature,
        max_tokens=max_tokens,
        top_p=top_p,
        frequency_penalty=frequency_penalty,
        presence_penalty=presence_penalty,
        prompt_chunk_size=diff_chunk_size
    )
    logger.debug(f"Summarized review: {summarized_review}")
    logger.debug(f"Chunked reviews: {chunked_reviews}")

    # Create a comment to a pull request
    create_a_comment_to_pull_request(
        github_token=os.getenv("GITHUB_TOKEN"),
        github_repository=os.getenv("GITHUB_REPOSITORY"),
        pull_request_number=int(os.getenv("GITHUB_PULL_REQUEST_NUMBER")),
        git_commit_hash=os.getenv("GIT_COMMIT_HASH"),
        body=summarized_review
    )


if __name__ == "__main__":
    # pylint: disable=no-value-for-parameter
    main()
